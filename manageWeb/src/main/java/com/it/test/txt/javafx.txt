javafx中可以设计一个类,继承service(fx包下的),进行上传进度的控制
executors,可以用来设计线程池

获取listview的cell中的graphic(checkbox)
1.直接在类中天加checkbox
2.listview.lookupall("checkbox")后,再转为List

this.getDialogPane().lookupButton(ButtonType.OK).addEventFilter(ActionEvent.ACTION, {
	it.consume()//清除事件
	Tb_whWare ware = tbWare.getSelectionModel().getSelectedItem()
	Tb_whWareSpec spec = tbSpec.getSelectionModel().getSelectedItem()
	if (ware == null || spec == null) {
		new Alert(Alert.AlertType.INFORMATION, "请选中表中的行").showAndWait()
		return
	}
	if (!tfAmount.getText().trim().isNumber()) {
		new Alert(Alert.AlertType.INFORMATION, "请输入进货数量").showAndWait()
		return
	}
	EJB.wareService.wareIn(EJB.sid, ware.getWhWareId(), spec.getWhSpecId(), tfAmount.getText().toDouble())
	this.close()
})


//tableview
tableView.setRowFactory {
	TableRow<BeanTableItem> row = new TableRow<BeanTableItem>()
	row.setOnContextMenuRequested {
		if (row.empty) return
		rowContextMenu.show(row, it.screenX, it.screenY)
	}
	row.setOnMouseClicked {
		if (it.clickCount == 2 && it.button == MouseButton.PRIMARY) {
			OrderPriceEditorDialog.newInstance().load(row.getItem().order).showAndWait()
		}
	}
	return row
}


<TableColumn fx:id="tcItemName" prefWidth="132.0" text="零件名称">
   <cellValueFactory>
	   <PropertyValueFactory property="itemName" />
   </cellValueFactory>
</TableColumn>

//格式化某列
tcOperate.setCellFactory({
	new TableCell<Tb_whUsageLog, String>() {
		@Override
		protected void updateItem(String item, boolean empty) {
			super.updateItem(item, empty)
			Tb_whUsageLog row = getTableRow().getItem() as Tb_whUsageLog;
			tbUsageLog.getSelectionModel().select(row)
			HBox hBox = new HBox();
			Button btnPrint = new Button("打印")
			btnPrint.setOnAction(new EventHandler<ActionEvent>() {
				@Override
				void handle(ActionEvent event) {
					WarePrintDialog dialog = new WarePrintDialog()
					dialog.showAndWait()
				}
			})
			hBox.getChildren().add(btnPrint)
			hBox.setAlignment(Pos.CENTER)
			hBox.setOpacity(5d)
			if (row == null) {
				setGraphic(null)
			} else {
				setGraphic(hBox)
			}
		}
	}
})

//listView
listView.getSelectionModel().selectedItemProperty().addListener(
	(ObservableValue<? extends String> observable, String oldValue, String newValue) ->{
		label.setText(newValue);
});

listView.setCellFactory(new Callback<ListView<String>, ListCell<String>>() {
	@Override
	ListCell<String> call(ListView<String> param) {
		new ListCell<String>() {
			@Override
			protected void updateItem(String item, boolean empty) {
				super.updateItem(item, empty)
				if (empty || item == null) {
					setGraphic(null);
				} else {
					setGraphic(paperMap.get(item))
				}
				setText(item);
			}
		}
	}
})

listcell
cmbUsername.setCellFactory(new Callback<ListView<String>, ListCell<String>>() {
	public ListCell<String> call(ListView<String> param) {
		ListCell<String> cell = new ListCell<String>() {
			Label label = new Label();
			Hyperlink link = new Hyperlink("清除");
			HBox h1 = new HBox()
			HBox root = new HBox(h1, link);
			{
				h1.children.add(label);
				h1.setAlignment(Pos.CENTER_LEFT);
				HBox.setHgrow(h1, Priority.ALWAYS);
				root.setAlignment(Pos.CENTER_LEFT);
				link.setTextFill(Paint.valueOf("#FF0000"));
				root.setSpacing(10);
			}

			@Override
			protected void updateItem(String item, boolean empty) {
				if (empty) {
					setGraphic(null);
				} else {
					setGraphic(root);
					link.setOnMousePressed({ cmbUsername.getItems().remove(item); });
					label.setText(item);
				}
				super.updateItem(item, empty);
			}
		};
		return cell;
	}
});


//右键选项
new AuthedMenu('仓库设置', '显示仓库首页', null,
	new AuthedMenuItem('品牌设置', '显示仓库首页', null, {
		PaperParamEditor.newInstance().showAndWait()
	}),
	new AuthedMenuItem('供应商设置', '显示仓库首页', null, {
		SupplierViewer.newInstance().showAndWait()
	}),
	new AuthedMenuItem('领料单位设置', '显示仓库首页', null, {
		ConsumerViewer.newInstance().showAndWait()
	})
),

rowContextMenu.items.add(new Menu('定金', null, m401, m402))
			rowContextMenu.items.add(new SeparatorMenuItem())
			rowContextMenu.items.add(m200)   //修改交货时间
			rowContextMenu.items.add(m701)   //加急
			rowContextMenu.items.add(m202)   //补单


m1.setOnAction {
	def item = tableview.selectionModel.selectedItem;
	if (item != null) {
		MyUtil.showObject("客户ID${item.customerId}");
	}
}

////////////////////////////////////////////////////////////////////////
屏幕的左上角为(0.0)原点
stage>scene>node //舞台>场景>节点

new webview().getWebEngine().loadcontent()

new htmleditor().gettext()获取网页编辑器的文本
new htmleditor().gethtmltext()获取带有页面标签的文本字符串

退出时system.exit(0)

Menu菜单
    new Menu().setaccelerator(keycombination.keycombination("ctrl+x"))//设置快捷键
Menuitem//菜单子项
CheckMenuItem//菜单中可以多选的item
Contextmenu,//上下文,鼠标右键显示的内容

Clipboard.getsystemclipboard()//获取系统的剪切板
new Clipboardcontent()//创建剪切板

Cursor.hand//手型光标
MouseButton.enumeration
MouseEvent.enumeration
WindowEvent.enumeration
TimeLine.indefinite//无穷大,动画的时候用

new LinearGradient()线型梯度
new Button.fire()//触发
Event.fireEvent(a,b)//触发
fxcollection.observablearraylist()
setmousetransparent()设置当前页面是否对鼠标不起作用
initmodality()设置模态框样式
pickupbounds()是否包括边界(把边界计算在内)

label
textfield
textarea
button
checkbox
radiobutton
separator//分隔符
splitmenubutton//分离式菜单按钮,可以直接写在toolbar中,点击后直接执行
combobox//组合下拉框,点击后,相当于选中某个item
passwordtextfield
togglegroup,togglebutton
tootip//提示
alert//弹框
notifaction//提醒
dialog//对话框
group
tableview,tablecell
treeview,treeitem
listview
imageview
gridpane//new inset()设置间距
slider

tablecolumn.setsorttype()
tableview.setcellfactory()
tableview.setcellvaluefactory()

//设置图片
Image image=new Image(this.getclass().getresourceasstream("logo.ico"))
new ImageView(image)

//缩放
label.setscalex(1.5)//放大1.5倍
label.setgraphic(new image("back.png"))//设置图像
label.setEffect(new DropShadow())//设置效果

//滑块,tick刻度,minortick最小的刻度
slider.setmax()//设置最大值
slider.setmin()//设置最小值
slider.setshowticklabels(true)//是否显示标签
slider.setshowtickmarks(true)//设置是否显示刻度
slider.setmajormarkunit(50)//显示主刻度单位距离
slider.setminortickcount(5)//设置次刻度之间的间距
slider.setblockincrement(10)//设置每次移动距离