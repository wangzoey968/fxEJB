查询每科都大于80的学生姓名
SELECT * FROM tb_sj_mapping AS map GROUP BY map.tb_SpareParts_Id HAVING MIN(tb_Job_Id)>80;

数据库查询的时候,limit 0,100,表示从起始的位置开始查询,共查询100条

根据某个字段的后4位排序,使用order by right(orderId,4)
SELECT orderId FROM tb_order ORDER BY RIGHT(orderId,4) LIMIT 0,10

使用not对数据筛选
select * from tb_order where true and not (true or false)
  between and , in , not in ,not exist
  max(),min(),avg(),sum(),count(),concat()
  group by year(createTime),按照结果中的createTime的年份分组
多表联查
select distinct tableA.字段,tableB.字段  from tableA inner join tableB on tableA.字段=tabelB.字段 where 子句 group by 子句 having 子句 order by 子句 limit 数字 offset 数字

//1
SELECT
	job
FROM
	tb_job job
LEFT JOIN tb_musicwire mw ON job.id = mw.tb_Job_Id
LEFT JOIN tb_spareparts sp ON mw.tb_SpareParts_Id = sp.id
WHERE
	sp.orderId IN ("ZDMP1711243364")
LIMIT 0,100

//2
SELECT
	job.*
FROM
	tb_job job,
	tb_spareparts sp,
	tb_musicwire mw
WHERE
	job.id = mw.tb_Job_Id
AND mw.tb_SpareParts_Id = sp.id
AND sp.orderId = "ZDMP1711243364"

正常sql
insert into tableA （id，userName，password） VALUES (null,'Wang','123')

//不加where,为选中全部,然后操作
//查询数据
SELECT * FROM tb_alarm  order by createTime desc
//插入数据
INSERT INTO tb_alarm VALUES(NULL,'a',SYSDATE(),SYSDATE(),'a',1,'a','a',1)
//更新语句
UPDATE tb_alarm SET alarmTime=SYSDATE(),createTime=SYSDATE() WHERE id=2
//删除语句,后面记得加上executeUpdate()
DELETE FROM tb_alarm WHERE alarmRule LIKE "%1234%"
session.createQuery("DELETE FROM Tb_Accident_Punish_v01 WHERE accidentId=:accidentId")
                        .setParameter('accidentId', accident.id)
                        .executeUpdate()

session.createQuery("FROM Tb_User WHERE userName like :keyword").setParameter('keyword', "%" + keyword + "%").list();

在数据库中执行条件的时候某列例如 where username=null 和 where username is null(列里面的值为null空)效果是不同的

数据库的粒度
表锁,页锁(一般是2-16k),行锁

数据库事务的隔离级别(ISOLATION)有4个，由低到高依次为Read uncommitted、Read committed、Repeatable read、Serializable，这四个级别可以逐个解决脏读、不可重复读、幻读这几类问题。
１. ISOLATION_READ_UNCOMMITTED：这是事务最低的隔离级别，它充许令外一个事务可以看到这个事务未提交的数据。
      这种隔离级别会产生脏读，不可重复读和幻像读。
２. ISOLATION_READ_COMMITTED：保证一个事务修改的数据提交后才能被另外一个事务读取。另外一个事务不能读取该事务未提交的数据
３. ISOLATION_REPEATABLE_READ：这种事务隔离级别可以防止脏读、不可重复读。但是可能出现幻像读。
      它除了保证一个事务不能读取另一个事务未提交的数据外，还保证了避免下面的情况产生(不可重复读)。
４. ISOLATION_SERIALIZABLE：这是花费最高代价但是最可靠的事务隔离级别。事务被处理为顺序执行。
      除了防止脏读，不可重复读外，还避免了幻读。

脏读(Dirty Read)：读取到了未提交的数据
不可重复读(Nonrepeatable Read)：不可重复读意味着我们在同一个事务中执行完全相同的select语句时可能看到不一样的结果。(一般是修改了某条数据)(可以理解为两次读取,读取的结果不一致,即不能重复读取)
幻读(Phantom Read)：当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影” 行.(一般是添加或删除了某行)(可以理解为有幻象)

大致的区别在于不可重复读是由于另一个事务对数据的修改所造成的，而幻读是由于另一个事务插入或删除引起的

spring中的传播机制(PROPAGATION)
1、PROPAGATION_REQUIRED：	如果当前没有事务，就创建一个新事务，如果当前存在事务，就加入该事务，该设置是最常用的设置。
2、PROPAGATION_SUPPORTS：	支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就以非事务执行。
3、PROPAGATION_MANDATORY：	支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就抛出异常。
4、PROPAGATION_REQUIRES_NEW：创建新事务，无论当前存不存在事务，都创建新事务。
5、PROPAGATION_NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。
6、PROPAGATION_NEVER：		以非事务方式执行，如果当前存在事务，则抛出异常。
7、PROPAGATION_NESTED：		如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作。

映射表的头
@Entity
@Table(name = "tb_group_auth",
        uniqueConstraints = {@UniqueConstraint(columnNames = {"tb_group_id", "tb_auth_id"})},
        indexes = {
                @Index(name = "groupIndex", columnList = "tb_group_id"),
                @Index(name = "authIndex", columnList = "tb_auth_id")
        })

JPA提供的四种标准用法为TABLE,SEQUENCE,IDENTITY,AUTO.
@Id
@GeneratedValue(strategy = GenerationType.IDENTITY)//直接是单个表的主键自增,最常用
TABLE：使用一个特定的数据库表格来保存主键。
SEQUENCE：根据底层数据库的序列来生成主键，条件是数据库支持序列。
IDENTITY：主键由数据库自动生成（主要是自动增长型）
AUTO：主键由程序控制。

@Column(columnDefinition = "INT NOT NULL DEFAULT 0 ")//进行自己定义数据类型

@Column(nullable = false, unique = true, length = 45)

//数据库引擎
Innodb引擎提供了对数据库ACID事务的支持。并且还提供了行级锁和外键的约束.所以当需要使用数据库的事务时，该引擎就是首选。由于锁的粒度小，写操作是不会锁定全表的。所以在并发度较高的场景下使用会提升效率的。一种采用行级锁定的事物引擎.
MyIASM ,MySql的默认引擎，但不提供事务的支持，也不支持行级锁和外键.执行Insert插入和Update更新语句时，即执行写操作的时候需要锁定这个表。如果表的读操作远远多于写操作时，并且不需要事务的支持的。可以将MyIASM作为数据库引擎的首先。是一个表级锁定的非事物引擎.

Myisam 只支持表级锁，InnoDB支持行级锁 添加了(行级锁/表级锁)锁的数据不能被其它事务再锁定，也不被其它事务修改（修改、删除） 。是表级锁时，不管是否查询到记录，都会锁定表。

for update 在sql语句最后加上这个表示锁定某些条记录

insert产生表级锁
update产生行级锁

LockMode中的锁的模式
none,表示当缓存中存在对象,直接返回对象的引用,否则到数据库中去select.此为默认值
read,表示不论缓存中是否有该对象,都到数据库中去查找.如果设置了版本检查,就和内存中的对象版本比较.
upgrade,不管缓存中是否存在对象,总是通过select语句到数据库中加载该对象,如果映射文件中设置了版本元素,就执行版本检查,比较缓存中的对象是否和数据库中对象的版本一致,如果数据库系统支持悲观锁(如Oracle/MySQL),就执行select…for update语句,如果不支持(如Sybase),执行普通select语句.
upgrade_nowait,和LockMode.UPGRADE具有同样功能,此外,对于Oracle等支持update nowait的数据库,执行select…for update nowait语句,nowait表明如果执行该select语句的事务不能立即获得悲观锁,那么不会等待其它事务释放锁,而是立刻抛出锁定异常.
wait,表示请求的资源被锁定未释放的时候,进行等待(blocking),直到资源被释放或者用户强制结束命令.
write,这种模式仅供hibernate内部使用,程序中不应该出现.
force,强制更新数据库的对象的版本属性,表明当前事物已经更新了这个对象.

		session.createQuery("SELECT o FROM Tb_Order o LEFT JOIN Tb_SpareParts sp ON sp.orderId=o.orderId " +
				" LEFT JOIN Tb_MusicWire mw ON sp.id=mw.tb_SpareParts_Id " +
				" LEFT JOIN Tb_Job j ON mw.tb_Job_Id=j.id " +
				" WHERE o.createTime >= :dateFrom AND o.createTime < :dateTo  AND j.jobId like :keyword " +
				" AND o.demandPack=true AND o.deleted=false AND j.jobType=:jobType" +
				(onlyNotPack ? "  AND o.packReady=false " : ""))
				.setParameter('dateFrom', Timestamp.valueOf("${dateFrom} 00:00:00.000"))
				.setParameter('dateTo', Timestamp.valueOf("${dateTo} 23:59:59.999"))
				.setParameter('jobType', Jobs.YinShua)
				.setParameter('keyword', "%" + keyword).list().each { Tb_Order order ->
			if (list.find { it.id == order.id } == null) list.add(order);
		}

//mysql循环插入数据-----------------------------------------start
create PROCEDURE insertToUserMessage (num int)

begin
	declare i int default 0;
	WHILE i < num do
		INSERT INTO z_test(id,name,fenshu) VALUES(NULL,'zhang',i);
		SET  i = i + 1;
	END while;
end ;

call insertToUserMessage(500);
//mysql循环插入数据--------------------------------------end

mysql中字段是timestamp类型的使用
select * from tb_order where createTime>='2019-06-11 08:00:00' and createTime<'2019-06-15 08:00:00'

字段以数字/或者字母开头,使用正则表达式进行匹配
select * where orderId REGEXP '^[0-9]';

SELECT
	orderId AS '订单号',
	orderType AS '订单类型',
	businessManagerName AS '业务经理',
	customerName,
	deadlineTime AS '交货日期',
	preSetDeliveryTime AS '预定送货时间',
	preSetDeliveryMan AS '预定送货人',
	productMoney AS '产品金额',
	realityDeliveryTime AS '实际送货时间',
	realityDeliveryMan AS '实际送货人',
	CASE deleted
        WHEN TRUE THEN
            '已删除'
        WHEN FALSE THEN
            '在'
        END '是否删除',
    CASE delivered
        WHEN TRUE THEN
            '已送达'
        WHEN FALSE THEN
            '未'
        ELSE
            '数据无效'
        END '是否送达'
FROM
	tb_order